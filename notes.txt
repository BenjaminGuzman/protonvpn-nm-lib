- I don't really like classes only with static methods (for example Utilities), in Python we have modules for namespacing
- I believe quite a lot of classes should be singletons (for example KillSwitch, NMClient, etc.)
- Creating instances at code import is a no-go.
- Same in default values (has very dangerous side effects)
- Server is not a base classes for Physical or Logical servers. It's not the same thing and there is no "interchangeability between them".
- On the other hand, there's a lot of places where inheritance can help
- Unclear code dependencies is super dangerous. This is an example:
In [1]: import protonvpn_nm_lib.core.vpn.vpn_configuration
---------------------------------------------------------------------------
ModuleNotFoundError                       Traceback (most recent call last)
<ipython-input-1-8eb382e90cef> in <module>
----> 1 import protonvpn_nm_lib.core.vpn.vpn_configuration

~/git/ProtonVPN/Linux/protonvpn-nm-core/protonvpn_nm_lib/core/vpn/vpn_configuration.py in <module>
      6 
      7 from ..utils import SubclassesMixin
----> 8 from ... import exceptions
      9 from .. import capture_exception
     10 from ...constants import (CACHED_OPENVPN_CERTIFICATE, OPENVPN_TEMPLATE,

~/git/ProtonVPN/Linux/protonvpn-nm-core/protonvpn_nm_lib/__init__.py in <module>
      1 # Session
----> 2 from .core.session import APISession
      3 # User
      4 from .core.user import ProtonVPNUser
      5 # Connection

~/git/ProtonVPN/Linux/protonvpn-nm-core/protonvpn_nm_lib/core/session/__init__.py in <module>
----> 1 from .proton_session_wrapper import ProtonSessionWrapper # noqa
      2 from .session import APISession # noqa

~/git/ProtonVPN/Linux/protonvpn-nm-core/protonvpn_nm_lib/core/session/proton_session_wrapper.py in <module>
      8 
      9 import requests
---> 10 from proton.api import ProtonError, Session
     11 
     12 from ... import exceptions

ModuleNotFoundError: No module named 'proton'


- When you have code like:

 try:
      return self.convert_from_json_to_dict_format(stored_data)
 except json.decoder.JSONDecodeError as e:
 [...]
 
  you assume that it's json.loads. So just use it, don't wrap it in a method that hides it.
  
  
- You should be more explicit about what the exception mean. It's good to have multiple types, but it's not clear either by their name or their docstring what they correspond to.
- This is particularly useless:
class API10013Error(ProtonSessionWrapperError):
    """Error 85032."""