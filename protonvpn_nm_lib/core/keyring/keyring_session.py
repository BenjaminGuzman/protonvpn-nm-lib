from ...enums import KeyringEnum
from ...logger import logger


class KeyringSession:
    """KeyringSession class.

    This class is an abstraction of KeyringAdapter. It should be
    used only to manage Session entry.
    """
    keyring_sessiondata = KeyringEnum.DEFAULT_KEYRING_SESSIONDATA.value

    def __init__(self, keyring_adapter):
        self.keyring_adapter = keyring_adapter
        self._session = None
        self._api_url = None
        self._appversion = None
        self._user_agent = None
        self._cookies = None
        self._session_data = None

    @property
    def session(self):
        return self._session

    @property
    def api_url(self):
        return self._api_url

    @property
    def appversion(self):
        return self._appversion

    @property
    def user_agent(self):
        return self._user_agent

    @property
    def cookies(self):
        return self._cookies

    @property
    def session_data(self):
        return self._session_data

    @staticmethod
    def init(keyring_adapter):
        """Static method to initialize KeyringSession.

        Args:
            keyring_adapter (KeyringAdapter):
            can also be passed some other alternative
            implementation of a keyring.
        """
        keyring_session = KeyringSession(keyring_adapter)
        keyring_session.reload_properties()

        return keyring_session

    def store(self, session_dump):
        """Store session.

        Instance properties are automatically updated once, so it is not
        needed to run self.reload_properties().

        Args:
            user_data (dict)
        """
        self.set_properties(session_dump)

        self.keyring_adapter.store_data(
            self._session, self.keyring_sessiondata
        )

    def reload_properties(self):
        """Reload class proprties.

        This methods gets the stored data and updates the properties
        if its instance.
        """
        stored_session_data = self.keyring_adapter.get_stored_data(
            self.keyring_sessiondata,
        )
        self.set_properties(stored_session_data)

    def set_properties(self, session_data):
        """Set instance properties.

        Args:
            session_data(dict)
        """
        try:
            self._session = None if len(session_data) < 1 else session_data
            self._api_url = session_data.get("api_url", None)
            self._appversion = session_data.get("appversion", None)
            self._user_agent = session_data.get("User-Agent", None)
            self._cookies = SessionCookie.init(
                session_data.get("cookies", None)
            )
            self._session_data = SessionData.init(
                session_data.get("session_data", None)
            )
        except AttributeError as e:
            logger.exception(e)

    def delete(self):
        """Delete session entry.

        Session is deleted via the keyring adapater.
        """
        self.keyring_adapter.delete_stored_data(self.keyring_sessiondata)
        self._session = None
        self._api_url = None
        self._appversion = None
        self._user_agent = None
        self._cookies = None
        self._session_data = None


class SessionCookie:
    """"SessionCookie class.

    Class represents the session cookie dict from session headers that
    are generated by proton-client.

    New instances are created everytime the object is updated in the
    KeyringSession class.
    """
    def __init__(self):
        self._session_id = None
        self._version = None

    @property
    def session_id(self):
        return self._session_id

    @property
    def version(self):
        return self._version

    @staticmethod
    def init(cookies_data):
        session_cookie = SessionCookie()
        session_cookie.set_properties(cookies_data)

        return session_cookie

    def set_properties(self, cookies_data):
        try:
            self._session_id = cookies_data.get("Session-Id", None)
            self._version = cookies_data.get("Version", None)
        except AttributeError as e:
            pass
            # logger.exception(e)


class SessionData:
    """"SessionData class.

    Class represents the session data dict from session headers that
    are generated by proton-client.

    New instances are created everytime the object is updated in the
    KeyringSession class.
    """
    def __init__(self):
        self._uid = None
        self._access_token = None
        self._refresh_token = None
        self._scope = None

    @property
    def uid(self):
        return self._uid

    @property
    def access_token(self):
        return self._access_token

    @property
    def refresh_token(self):
        return self._refresh_token

    @property
    def scope(self):
        return self._scope

    @staticmethod
    def init(session_data):
        session_data_ = SessionData()
        session_data_.set_properties(session_data)

        return session_data_

    def set_properties(self, session_data):
        try:
            self._uid = session_data.get("UID", None)
            self._access_token = session_data.get("AccessToken", None)
            self._refresh_token = session_data.get("RefreshToken", None)
            self._scope = session_data.get("Scope", None)
        except AttributeError as e:
            pass
            # logger.exception(e)
